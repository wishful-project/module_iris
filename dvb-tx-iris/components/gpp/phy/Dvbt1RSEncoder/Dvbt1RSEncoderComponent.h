/**
 * \file components/gpp/phy/Dvbt1RSEncoder/Dvbt1RSEncoderComponent.h
 * \version 0.1
 *
 * \section COPYRIGHT
 *
 * Copyright 2012-2016 The Iris Project Developers. See the
 * COPYRIGHT file at the top-level directory of this distribution
 * and at http://www.softwareradiosystems.com/iris/copyright.html.
 *
 * \section LICENSE
 *
 * This file is part of the Iris Project.
 *
 * Iris is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 * 
 * Iris is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * A copy of the GNU Lesser General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 * \section DESCRIPTION
 *
 * The Dvbt1RSEncoder component.
 */

#ifndef PHY_DVBT1RSENCODERCOMPONENT_H_
#define PHY_DVBT1RSENCODERCOMPONENT_H_

#include <boost/scoped_ptr.hpp>
#include "irisapi/PhyComponent.h"

namespace iris
{
namespace phy
{

/// TS packet size
#define TS_PACKET_SIZE	188

// Encoded TS packet size
#define RS_PACKET_SIZE	204

/// R-S code over GF(2^8)
#define T1_MM  8

/// Nonshortened message size
#define T1_KK  239

/// Nonshortened codeword size
#define	T1_NN 255

/// Parity bytes size
#define T1_NN_KK 16

/// Clear an array from a point towards the beginning
#define	T1_CLEAR(a,n) {\
	for(int ci=(n)-1;ci >=0;ci--)\
		(a)[ci] = 0;\
	}

/// Placeholder for zero
#define T1_A0 (T1_NN)

/** A DVB-T1 R-S Encoder component.
 *
 * Dvbt1RSEncoderComponent is the second block composing the DVB-T transmission chain.
 * This block is a nonbinary Reed-Solomon (R-S) encoder operating on the Galois
 * field GF(2^8) of 256 elements. Every element in the field is either 0 or an integer
 * power of a primitive element \f$\alpha\f$; the field is generated by the primitive
 * polynomial
 * \f$p\left(x\right)=x^8 + x^4 + x^3 + x^2 + 1\f$. The code generator polynomial,
 * instead, is generated to have as roots all the first 16 powers (0 to 15) of the
 * primitive element \f$\alpha=2\f$,as
 * \f[
 *   g\left(x\right)= \left(x+\alpha^0\right) \left(x+\alpha^1\right) \ldots
 *                    \left(x+\alpha^{15}\right) \ .
 * \f]
 * The encoder computes the remainder of the division of the message polynomial
 * \f$m\left(x\right)\f$, of 239 bytes, by the generator polynomial \f$g\left(x\right)\f$, and
 * considers this as the parity polynomial \f$p\left(x\right)\f$, of 16 bytes. The codeword
 * is then composed py appending
 * the parity polynomial and the message polynomial together (255 bytes), as
 * \f[
 *    c\left(x\right) = p\left(x\right) + x^{16} m\left(x\right) \ .
 * \f]
 * This code is capable of correcting \f$t=8\f$ errated bytes in every codeword.
 * Actually, DVB-T uses shortened codewords of 204 bytes, generated by messages
 * of 188 bytes prepended by a string of 51 zero bytes. The encoder itself can be implemented
 * with a feedback shift register, operating in GF(2^8). Please note that the codewords
 * are message-first parity-last ordered. 
 *
 * \image html rsencoder.png DVB-T shortened R-S encoder.
 * \image latex rsencoder.png DVB-T shortened R-S encoder.
 *
 * Differently from the simpler multiply-and-add operations in the binary Galois
 * field GF(2), in this case we must recur to byte operators, which are practically
 * implemented with look-up tables that perform exponentiation and logarithm of the
 * GF(2^8) elements. Particular care is taken to consider the zero element.
 * 
 * There is only one parameter that can be changed in the XML
 * configuration file:
 *
 * * _debug_: by default set to "false", is used to print some small debugging
 *          information for the interested developer.
 *
 * __References__
 * * ETSI Standard: _EN 300 744 V1.5.1, Digital Video Broadcasting (DVB); Framing
 *   structure, channel coding and modulation for digital terrestrial television_,
 *   available at [ETSI Publications Download Area](http://pda.etsi.org/pda/queryform.asp)
 * * S. Li, D. J. Costello, _Error Control Coding, Second Edition_, Prentice-Hall,
 *   Inc. Upper Saddle River, NJ, USA, 2004
 */
class Dvbt1RSEncoderComponent
  : public PhyComponent
{
 public:

  /// A vector of bytes
  typedef std::vector<uint8_t>  ByteVec;
  
  /// An iterator for a vector of bytes
  typedef ByteVec::iterator     ByteVecIt;

  Dvbt1RSEncoderComponent(std::string name);
  ~Dvbt1RSEncoderComponent();
  virtual void calculateOutputTypes(
      std::map<std::string, int>& inputTypes,
      std::map<std::string, int>& outputTypes);
  virtual void registerPorts();
  virtual void initialize();
  virtual void process();
  virtual void parameterHasChanged(std::string name);

 private:

  bool debug_x;               ///< Debug flag (default = false)
  
  void setup();
  void destroy();
  int packetEncode(unsigned char *data, unsigned char *bb);
  
  /// Computes the modulo-255 of a number
  inline int modnn(int x)
  {
	  while (x >= T1_NN) {
		  x -= T1_NN;
		  x = (x >> T1_MM) + (x & T1_NN);
	  }
	  return x;
  };

  double timeStamp_;          ///< Timestamp of current frame
  double sampleRate_;         ///< Sample rate of current frame
  
  uint8_t rsCodeWord_[T1_NN]; ///< Nonshortened codeword
  int tsOffset_;              ///< Current offset in TS input
  static int index_[256];     ///< LUT containing the base \f$\alpha\f$ logarithm
                              ///  of the field elements
  static int alpha_[256];     ///< LUT containing the powers of \f$\alpha\f$
  static int gg_[17];         ///< R-S code generator polynomial

  /// Useful templates
  template <typename T, size_t N>
  static T* begin(T(&arr)[N]) { return &arr[0]; }
  template <typename T, size_t N>
  static T* end(T(&arr)[N]) { return &arr[0]+N; }
  
};

} // namespace phy
} // namespace iris

#endif // PHY_DVBT1RSENCODERCOMPONENT_H_
