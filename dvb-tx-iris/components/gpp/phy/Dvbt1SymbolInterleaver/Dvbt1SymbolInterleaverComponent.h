/**
 * \file components/gpp/phy/Dvbt1SymbolInterleaver/Dvbt1SymbolInterleaverComponent.h
 * \version 0.1
 *
 * \section COPYRIGHT
 *
 * Copyright 2012-2016 The Iris Project Developers. See the
 * COPYRIGHT file at the top-level directory of this distribution
 * and at http://www.softwareradiosystems.com/iris/copyright.html.
 *
 * \section LICENSE
 *
 * This file is part of the Iris Project.
 *
 * Iris is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 * 
 * Iris is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * A copy of the GNU Lesser General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 * \section DESCRIPTION
 *
 * The Dvbt1SymbolInterleaver component.
 */

#ifndef PHY_DVBT1SYMBOLINTERLEAVERCOMPONENT_H_
#define PHY_DVBT1SYMBOLINTERLEAVERCOMPONENT_H_

#include <boost/scoped_ptr.hpp>
#include "irisapi/PhyComponent.h"

namespace iris
{
namespace phy
{

/** A DVB-T1 symbol interleaver component.
 *
 * Dvbt1SymbolInterleaverComponent is the seventh block composing the DVB-T
 * transmission chain.
 * Its purpose, together with the bit interleaver, is that of reordering the
 * channel encoded bits in order to convert the possible error bursts arising from
 * the communication on the physical channel (due to impulsive noise, multipath,
 * fading) into well-separated single-error events. This way, the channel decoders
 * at the RX side (Viterbi and Reed-Solomon decoder) are able to perform at their
 * best theoretical limit in white Gaussian noise (WGN) conditions.
 *
 * \image html symbolinterleaver.png DVB-T symbol interleaver.
 * \image latex symbolinterleaver.png DVB-T symbol interleaver.
 *
 * The symbol interleaver is a block-based interleaver, i.e., a block of consecutive
 * symbols is written in the interleaving RAM, and then the same symbols are read
 * into an output block with pseudo-random read addresses. Every output block
 * of symbols is mapped into an OFDM block. For instance, in the 8K case, the
 * symbol interleaver memory is of 6048 cells (1512 for the 2K case). The pseudo-
 * random interleaving law is generated by means of linear feedback registers,
 * whose state is turned into a valid interleaving address with the help of a bit
 * mapping between the register bits and the addressing bits. Every second interleaving
 * block, the interleaving law is exchanged between the reading and writing
 * processes. In the practical implementation used in IRIS, however, the
 * interleaving addresses are statically embedded in the source files, and a
 * simple address mapping law is applied.
 *
 * This block accepts in input elements in uint8_t (\f$\nu\f$-bit symbols) and
 * generates in output \f$\nu\f$-bit symbols (uint8_t).
 *
 * There are three parameters that can be changed in the XML
 * configuration file:
 *
 * * _debug_: by default set to "false", is used to print some small debugging
 *          information for the interested developer.
 * * _ofdmmode_: by default set to "2048", this is used to select one of the three
 *               possible OFDM modes. The admitted values are "2048", "4096",
 *               "8192", respectively for 2K, 4K (DVB-H, unused), and 8K.
 *
 * __References__
 * * ETSI Standard: _EN 300 744 V1.5.1, Digital Video Broadcasting (DVB); Framing
 *   structure, channel coding and modulation for digital terrestrial television_,
 *   available at [ETSI Publications Download Area](http://pda.etsi.org/pda/queryform.asp)
 */
class Dvbt1SymbolInterleaverComponent
  : public PhyComponent
{
 public:

  /// A vector of bytes
  typedef std::vector<uint8_t>  ByteVec;
  
  /// An iterator for a vector of bytes
  typedef ByteVec::iterator     ByteVecIt;

  Dvbt1SymbolInterleaverComponent(std::string name);
  ~Dvbt1SymbolInterleaverComponent();
  virtual void calculateOutputTypes(
      std::map<std::string, int>& inputTypes,
      std::map<std::string, int>& outputTypes);
  virtual void registerPorts();
  virtual void initialize();
  virtual void process();
  virtual void parameterHasChanged(std::string name);

 private:

  bool debug_x;               ///< Debug flag (default = false)
  int ofdmMode_x;             ///< OFDM mode (default = 2048)

  void setup();
  void destroy();

  double timeStamp_;          ///< Timestamp of current frame
  double sampleRate_;         ///< Sample rate of current frame
  
  int siOffset_;              ///< Interleaving offset
  int siLength_;              ///< Interleaving register length
  uint8_t *siRegister_;       ///< Actual interleaving register
  int eo_;                    ///< Even/odd numbered OFDM block

  static int H_2K_[1512], H_4K_[3024], H_8K_[6048];
    			
  /// Useful templates
  template <typename T, size_t N>
  static T* begin(T(&arr)[N]) { return &arr[0]; }
  template <typename T, size_t N>
  static T* end(T(&arr)[N]) { return &arr[0]+N; }

};

} // namespace phy
} // namespace iris

#endif // PHY_DVBT1SYMBOLINTERLEAVERCOMPONENT_H_
