/**
 * \file components/gpp/phy/Dvbt1ConvEncoder/Dvbt1ConvEncoderComponent.h
 * \version 0.1
 *
 * \section COPYRIGHT
 *
 * Copyright 2012-2016 The Iris Project Developers. See the
 * COPYRIGHT file at the top-level directory of this distribution
 * and at http://www.softwareradiosystems.com/iris/copyright.html.
 *
 * \section LICENSE
 *
 * This file is part of the Iris Project.
 *
 * Iris is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 * 
 * Iris is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * A copy of the GNU Lesser General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 * \section DESCRIPTION
 *
 * The Dvbt1ConvEncoder component.
 */

#ifndef PHY_DVBT1CONVENCODERCOMPONENT_H_
#define PHY_DVBT1CONVENCODERCOMPONENT_H_

#include <boost/scoped_ptr.hpp>
#include "irisapi/PhyComponent.h"

namespace iris
{
namespace phy
{

/** A DVB-T1 convolutional encoder component.
 *
 * Dvbt1ConvEncoderComponent is the fourth block composing the DVB-T transmission chain.
 * This block is a binary convolutional encoder of rate \f$k/n=1/2\f$ with a 
 * constraint length of \f$L=6\f$. The output bits are generated by proper
 * connections between the shift register cells and the XOR-adders. The connection
 * configuration is represented in octal form by the generator polynomials
 * \f$G_1=0171\f$ and \f$G_2=0133\f$.
 *
 * \image html convencoder.png DVB-T convolutional encoder.
 * \image latex convencoder.png DVB-T convolutional encoder.
 *
 * This block accepts in input elements in uint8_t (octets of bits) and generates
 * in output single bits (always formatted as uint8_t).
 * There is only one parameter that can be changed in the XML
 * configuration file:
 *
 * * _debug_: by default set to "false", is used to print some small debugging
 *          information for the interested developer.
 *
 * __References__
 * * ETSI Standard: _EN 300 744 V1.5.1, Digital Video Broadcasting (DVB); Framing
 *   structure, channel coding and modulation for digital terrestrial television_,
 *   available at [ETSI Publications Download Area](http://pda.etsi.org/pda/queryform.asp)
 * * S. Li, D. J. Costello, _Error Control Coding, Second Edition_, Prentice-Hall,
 *   Inc. Upper Saddle River, NJ, USA, 2004
 */
class Dvbt1ConvEncoderComponent
  : public PhyComponent
{
 public:

  /// A vector of bytes
  typedef std::vector<uint8_t>  ByteVec;
  
  /// An iterator for a vector of bytes
  typedef ByteVec::iterator     ByteVecIt;

  Dvbt1ConvEncoderComponent(std::string name);
  ~Dvbt1ConvEncoderComponent();
  virtual void calculateOutputTypes(
      std::map<std::string, int>& inputTypes,
      std::map<std::string, int>& outputTypes);
  virtual void registerPorts();
  virtual void initialize();
  virtual void process();
  virtual void parameterHasChanged(std::string name);

 private:

  bool debug_x;               ///< Debug flag (default = false)
  
  void setup();
  void destroy();

  double timeStamp_;          ///< Timestamp of current frame
  double sampleRate_;         ///< Sample rate of current frame
  
  int status_;                ///< Register with the delayed inputs (state)

  static unsigned char parity_[256]; ///< LUT containing the parity bits
			
  /// Useful templates
  template <typename T, size_t N>
  static T* begin(T(&arr)[N]) { return &arr[0]; }
  template <typename T, size_t N>
  static T* end(T(&arr)[N]) { return &arr[0]+N; }

};

} // namespace phy
} // namespace iris

#endif // PHY_DVBT1CONVENCODERCOMPONENT_H_
